generator client {
  provider = "prisma-client-js"
}

datasource db {
   provider = "mysql"
   url      = "mysql://root:12345678@localhost:3306/comfxyz"
}

model Server {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    type       String   @default("comfyui")
    name       String
    address    String
    isActive   Boolean  @default(true)
    description String
    owner      User     @relation(fields: [ownerId], references: [id])
    ownerId    Int
}

model User {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    username   String   @unique
    password   String 
    isAdmin     Boolean  @default(false)
    servers    Server[]
    permissions Permission[]
    workflows  ComfyWorkflow[]
    features   Feature[]
    BatchTask  BatchTask[]
}

model ComfyWorkflow {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    name       String
    description String
    workflow   Json
    owner      User     @relation(fields: [ownerId], references: [id])
    ownerId    Int
}

model Permission {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    name       String
    description String
    users      User[]
}


model Feature { 
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    name       String
    description String
    user       User     @relation(fields: [userId], references: [id])
    userId     Int
    items      FeatureItem[]
    BatchTask  BatchTask[]
}



model FeatureItem {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    name       String
    description String
    feature    Feature  @relation(fields: [featureId], references: [id])
    featureId  Int
    results    ResultItem[]
    params     Json
}

enum ExecuteStatus {
    INIT
    RUNNING
    SUCCESS
    FAIL
}

model BatchTask {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    name       String
    description String
    owner      User     @relation(fields: [ownerId], references: [id])
    ownerId    Int
    // 当前任务的执行批次
    batchSize  Int
    features   Feature[]
    results    ResultItem[]
    executeStatus ExecuteStatus
    executeTime DateTime
    // 当前任务执行完成后，会发送一个webhook给用户
    successWebhook String?
    successWebhookParams Json?
}

model ResultItem {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    FeatureItem FeatureItem  @relation(fields: [featureItemId], references: [id])
    batchTask BatchTask  @relation(fields: [batchTaskId], references: [id])
    batchTaskId Int
    featureItemId Int
    executeStatus ExecuteStatus 
    resultPath String
}