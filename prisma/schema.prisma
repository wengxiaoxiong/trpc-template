generator client {
  provider = "prisma-client-js"
}

datasource db {
   provider = "mysql"
   url      = "mysql://root:12345678@localhost:3306/comfxyz"
}

model Server {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    type       String   @default("comfyui")
    name       String
    address    String
    isActive   Boolean  @default(true)
    description String
    owner      User     @relation(fields: [ownerId], references: [id])
    ownerId    Int
}

model User {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    username   String   @unique
    password   String 
    avatar     String?
    isAdmin     Boolean  @default(false)
    servers    Server[]
    workflows  Workflow[]
    files      UserFile[]
}

model Workflow {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String?
    content     Json     // 存储原始工作流的具体内容
    isPublic    Boolean  @default(false)
    owner       User     @relation(fields: [ownerId], references: [id])
    ownerId     Int
    parameters  WorkflowParameter[]
    paramGroups WorkflowParamGroup[]
}

model WorkflowParameter {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    type        String   // 参数类型：string, number, boolean 等
    default     String?  // 默认值（JSON字符串）
    description String?
    required    Boolean  @default(false)
    workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
    workflowId  Int
    nodeId      String   // 存储节点ID
    paramKey    String   // 存储参数键名
}

model WorkflowParamGroup {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String   // X轴、Y轴、Z轴
    workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
    workflowId  Int
    combinations WorkflowParamCombination[]
    params      WorkflowParamGroupItem[]
}

model WorkflowParamGroupItem {
    id            Int               @id @default(autoincrement())
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    nodeId        String           // 节点ID
    paramKey      String           // 参数键名
    currentValue  String           // JSON字符串形式的当前值
    paramGroup    WorkflowParamGroup @relation(fields: [paramGroupId], references: [id], onDelete: Cascade)
    paramGroupId  Int
}

model WorkflowParamCombination {
    id            Int               @id @default(autoincrement())
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    paramValues   Json             // 存储参数值的组合
    paramGroup    WorkflowParamGroup @relation(fields: [paramGroupId], references: [id], onDelete: Cascade)
    paramGroupId  Int
}

// 文件类型枚举
enum FileType {
    // ai生成的图片
    AI_GENERATED_IMAGE
    // 用户上传的文件
    USER_UPLOADED_FILE
    // 图片参数
    PARAMETER_IMAGE
}

model UserFile {
    id          Int      @id @default(autoincrement())
    name        String
    size        Int
    type        String
    path        String
    description String?
    ownerId     Int
    owner       User     @relation(fields: [ownerId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    fileType    FileType @default(USER_UPLOADED_FILE)

    @@index([ownerId])
}